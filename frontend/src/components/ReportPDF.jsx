import { Document, Page, Text, View, Image, StyleSheet } from '@react-pdf/renderer';


const styles = StyleSheet.create({
  page: {
    padding: 30,
    fontFamily: 'Helvetica',
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 14,
    marginBottom: 20,
    textAlign: 'center',
    color: '#666',
  },
  section: {
    marginBottom: 20,
  },
  imageContainer: {
    marginBottom: 30,
    alignItems: 'center',
  },
  image: {
    maxWidth: '100%',
    marginBottom: 10,
  },
  metricsContainer: {
    marginTop: 20,
    padding: 10,
    backgroundColor: '#f5f5f5',
  },
  metricsTitle: {
    fontSize: 16,
    marginBottom: 10,
    fontWeight: 'bold',
  },
  metricRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
    padding: 5,
  },
  metricLabel: {
    fontSize: 12,
    color: '#444',
  },
  metricValue: {
    fontSize: 12,
    fontWeight: 'bold',
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    color: '#666',
    fontSize: 10,
  }
});

const ReportPDF = ({ results }) => {

  if (!results || !results.metrics) {
    return (
      <Document>
        <Page size="A4" style={styles.page}>
          <Text>No results available</Text>
        </Page>
      </Document>
    );
  }


  const formatMetric = (value) => {
    return typeof value === 'number' ? `${(value * 100).toFixed(1)}%` : 'N/A';
  };


  const getFixedImageUrl = (url) => {
    if (!url) return '';

    const cleanPath = url.replace('http://localhost:8000', '');
    return `http://localhost:8000${cleanPath}`;
  };


  const imageUrl = getFixedImageUrl(results.static_image);

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View>
          <Text style={styles.title}>Brain Tumor Segmentation Report</Text>
          <Text style={styles.subtitle}>
            Generated on: {new Date().toLocaleString()}
          </Text>


          <View style={styles.imageContainer}>
            {imageUrl && (
              <Image 
                src={imageUrl}
                style={styles.image}
                cache={false}
              />
            )}
            <Text style={{ fontSize: 10, color: '#666', marginTop: 5 }}>
              Segmentation Result
            </Text>
          </View>

          <View style={styles.metricsContainer}>
            <Text style={styles.metricsTitle}>Analysis Results</Text>
            
            {results.metrics && (
              <>
                <View style={styles.metricRow}>
                  <Text style={styles.metricLabel}>Necrotic Core:</Text>
                  <Text style={styles.metricValue}>
                    {formatMetric(results.metrics.tumor_core)}
                  </Text>
                </View>

                <View style={styles.metricRow}>
                  <Text style={styles.metricLabel}>Peritumoral Edema:</Text>
                  <Text style={styles.metricValue}>
                    {formatMetric(results.metrics.whole_tumor)}
                  </Text>
                </View>

                <View style={styles.metricRow}>
                  <Text style={styles.metricLabel}>GD-enhancing Tumor:</Text>
                  <Text style={styles.metricValue}>
                    {formatMetric(results.metrics.enhancing_tumor)}
                  </Text>
                </View>
              </>
            )}
          </View>

          <View style={[styles.section, { marginTop: 20 }]}>
            <Text style={{ fontSize: 12, marginBottom: 5 }}>Color Legend:</Text>
            <Text style={{ fontSize: 10, color: '#666' }}>

              • Black: Background{'\n'}
              • Red: Necrotic core{'\n'}
              • Yellow: Peritumoral edema{'\n'}
              • Green: GD-enhancing tumor
            </Text>
          </View>

          <Text style={styles.footer}>
            This report was automatically generated by the Brain Tumor Segmentation System
          </Text>
        </View>
      </Page>
    </Document>
  );
};

export default ReportPDF; 